// Import function for closing modal
import { closingModal } from "/src/scripts/modules/modal"

// Get DOM Elements
const form = document.querySelector(".form")
const successMessage = document.querySelector(".success-message")

// Get user exact current age
const userAge = value => {
  const yearInMs = 31556926000
  const birthDate = new Date(value)
  const birthDateInMs = birthDate.getTime()
  const currentDate = new Date()
  const currentDateInMs = currentDate.getTime()
  const age = (currentDateInMs - birthDateInMs) / yearInMs

  return age
}

// Create a class for manage each inputs, instead of one by one
class Input {
  constructor(name) {
    this.inputs = document.querySelectorAll(`input[name="${name}"]`)
    this.isValid = false
    this.validity = this.inputs[0].validity
    this.type = this.inputs[0].getAttribute("type")
    this.value = this.inputs[0].value
    this.error

    // particular case for radio & checkbox
    if (this.type === "radio" || this.type === "checkbox") {
      this.checked = false
    }
  }

  // Generate error messages
  hasError() {
    // Common cases
    if (this.validity.badInput) {
      this.error = "Veuillez rentrer une valeur correct"

      return this.error
    }

    if (this.validity.valueMissing) {
      this.error = "Veuillez remplir ce champs"

      return this.error
    }

    if (this.validity.patternMismatch) {
      if (this.type === "text") {
        this.error = "Veuillez rentrer 2 caractères alphabétiques ou plus"

        return this.error
      }

      if (this.type === "email") {
        this.error = "Veuillez rentrer une adresse email valide"

        return this.error
      }
    }

    if (
      this.validity.rangeUnderflow ||
      this.validity.rangeOverflow ||
      this.validity.stepMismatch
    ) {
      this.error = "Veuillez rentrer un nombre entier entre 0 et 99"

      return this.error
    }

    // Particular case - Date of birth
    if (this.type === "date") {
      // Throw an error if user age is under 0
      if (userAge(this.value) < 0) {
        this.error = "Le voyage temporel n'existe pas encore"

        return this.error
      }
      // Throw an error if user is to young
      else if (userAge(this.value) < 18) {
        this.error = "Vous devez être majeur pour participer"

        return this.error
      }
      // Throw an error if user is to old
      else if (userAge(this.value) > 100) {
        this.error = `${Math.floor(userAge(this.value))} ans vraiment ?`

        return this.error
      }
    }

    // particular case - Radio
    if (this.type === "radio") {
      this.inputs.forEach(input => {
        if (!input.checked) {
          this.error = "Veuillez sélectionner une ville"

          return this.error
        }
      })
    }

    // particular case - Checkbox
    if (this.type === "checkbox" && !this.checked) {
      this.error = "Veuillez accepter les conditions d'utilisations"

      return this.error
    }
  }

  // Show errors generated by hasError() method
  showError() {
    this.inputs[0].closest(".form__data").dataset.errorVisible = true
    this.inputs[0].closest(".form__data").dataset.error = this.error
  }

  // Remove errors & reset values
  removeError() {
    this.inputs[0].closest(".form__data").dataset.errorVisible = false
    this.inputs[0].closest(".form__data").removeAttribute("data-error")
    this.error = null
  }
}

// Generate new input with the class Input
const FirstName = new Input("firstName")
const LastName = new Input("lastName")
const Email = new Input("email")
const BirthDate = new Input("birthDate")
const Quantity = new Input("quantity")
const Locations = new Input("location")
const Terms = new Input("term")

// Create an array with fields
const fields = [
  FirstName,
  LastName,
  Email,
  BirthDate,
  Quantity,
  Locations,
  Terms
]

// Add a listener on each input
fields.forEach(field => {
  field.inputs.forEach(input => {
    input.addEventListener("change", event => {
      // Update value
      field.value = event.target.value
      if (field.type === "checkbox" || field.type === "radio") {
        field.checked = event.target.checked
      }

      // If error, show it
      if (field.hasError()) {
        field.showError()
        field.isValid = false
      }

      // If no error, remove it & validate
      if (!field.hasError()) {
        field.removeError()
        field.isValid = true
      }
    })
  })
})

const validate = event => {
  // Prevent the default behavior - Wait explicitly handled
  event.preventDefault()

  // Test if all items in the array are valid
  let fieldsAreValid = fields.every(field => field.isValid)

  if (!fieldsAreValid) {
    // Filter out invalid items
    let invalidFields = fields.filter(field => !field.isValid)

    // Show error for each invalid items
    invalidFields.forEach(field => {
      field.hasError()
      field.showError()
    })
  } else {
    form.setAttribute("valid", "")
    successMessage.innerHTML = "Merci pour votre inscription"

    // Close modal after 1 second
    setTimeout(() => {
      // Remove success message after 0.5 seconde after the modal is close
      setTimeout(() => {
        successMessage.innerHTML = ""

        form.removeAttribute("valid")
      }, 500)

      closingModal()

      // Reset form
      form.reset()

      // Reset input state
      fields.forEach(field => {
        field.isValid = false
      })
    }, 1000)
  }
}

form.addEventListener("submit", validate)
